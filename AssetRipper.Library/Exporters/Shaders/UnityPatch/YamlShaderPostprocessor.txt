using UnityEngine;
using UnityEditor;

namespace AssetRipperPatches.Editor
{
    /// <summary>
    /// This script is AssetRipper's patch for shaders exported as YAML assets.
    /// Such a shader can be assigned to and used by a material as a regular .shader asset,
    /// but it does not work with Shader.Find() unless we explicitly register it. 
    /// </summary>
    public class AssetRipperShaderPostprocessor : AssetPostprocessor
    {
        private const string ShaderExportPath = "Assets/Shader/";
        
        static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)
        {
            foreach (var importedAsset in importedAssets)
            {
                if (!importedAsset.StartsWith(ShaderExportPath)) continue;
                if (!importedAsset.EndsWith(".asset")) continue;
                foreach (var asset in AssetDatabase.LoadAllAssetsAtPath(importedAsset))
                {
                    if (!(asset is Shader shader)) continue;
                    ShaderUtil.RegisterShader(shader);
                    Debug.Log($"Registered shader \"{shader.name}\" from {importedAsset}");
                }
            }
        }
    }
}
